services:
  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672" # AMQP
      - "15672:15672" # RabbitMQ Management UI
      - "15692:15692" # Puerto de métricas de RabbitMQ
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_config:/etc/rabbitmq
      - rabbitmq_init:/docker-entrypoint-initdb.d
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
      RABBITMQ_DEFAULT_VHOST: /
      RABBITMQ_ENABLE_PROMETHEUS: true # Habilitar Prometheus
    networks:
      - infra
    healthcheck:
      test: ["CMD", "rabbitmqctl", "node_health_check"]
      interval: 30s
      timeout: 10s
      retries: 5

  nginx-proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    container_name: nginx-proxy-manager
    restart: always
    environment:
      PUID: 1000
      PGID: 1000
    ports:
      - "80:80"
      - "443:443"
      - "81:81" # Admin UI
    volumes:
      - npm_data:/data
      - npm_letsencrypt:/etc/letsencrypt
      - ./nginx-proxy-manager/npm-init.sh:/npm-init.sh # Montar el script en el contenedor
    command: /bin/bash -c "/npm-init.sh && tail -f /dev/null" # Ejecutar el script Bash al iniciar
    networks:
      - infra
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:81"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MongoDB Service
  mongodb:
    image: mongo:6
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    ports:
      - "27017:27017" # Puerto estándar de MongoDB
    volumes:
      - mongodb_data:/data/db
    networks:
      - infra
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'mongo --username $$MONGO_INITDB_ROOT_USERNAME --password $$MONGO_INITDB_ROOT_PASSWORD --eval ''db.adminCommand("ping")'' || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
  mongodb-exporter:
    image: bitnami/mongodb-exporter:latest
    container_name: mongodb-exporter
    environment:
      MONGODB_URI: mongodb://admin:admin@mongodb:27017
    ports:
      - "9216:9216" # Puerto de métricas de MongoDB
    networks:
      - infra
  # Prometheus Monitoring Service
  prometheus:
    image: prom/prometheus:v3.0.0
    container_name: prometheus
    restart: always
    volumes:
      - prometheus_data:/etc/prometheus
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090" # Prometheus Web UI
    networks:
      - infra
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Grafana Service
  grafana:
    image: grafana/grafana:11.4.0
    container_name: grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000" # Grafana Web UI
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - infra
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/login"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  # RabbitMQ Volumes
  rabbitmq_data:
    # driver_opts:
    #   type: none
    #   device: ./rabbitmq/data
    #   o: bind
  rabbitmq_config:
    # driver_opts:
    #   type: none
    #   device: ./rabbitmq/config
    #   o: bind
  rabbitmq_init:
    # driver_opts:
    #   type: none
    #   device: ./rabbitmq/init-scripts
    #   o: bind

  # Nginx Proxy Manager Volumes
  npm_data:
    # driver_opts:
    #   type: none
    #   device: ./nginx-proxy-manager/data
    #   o: bind
  npm_letsencrypt:
    # driver_opts:
    #   type: none
    #   device: ./nginx-proxy-manager/letsencrypt
    #   o: bind

  # MongoDB Volumes
  mongodb_data:
    # driver_opts:
    #   type: none
    #   device: ./mongodb/data
    #   o: bind

  # Monitoring Volumes
  prometheus_data:
    # driver_opts:
    #   type: none
    #   device: ./monitoring/prometheus_data
    #   o: bind
  grafana_data:
    # driver_opts:
    #   type: none
    #   device: ./monitoring/grafana_data
    #   o: bind

networks:
  infra:
    driver: bridge

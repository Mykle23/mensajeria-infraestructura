version: "3.8"

services:
  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672" # AMQP
      - "15672:15672" # RabbitMQ Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq # Volumen virtual para datos
      - rabbitmq_config:/etc/rabbitmq # Volumen virtual para configuración
      - rabbitmq_init:/docker-entrypoint-initdb.d # Volumen virtual para scripts de inicialización
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
      RABBITMQ_DEFAULT_VHOST: /
    networks:
      - infra
    healthcheck:
      test: ["CMD", "rabbitmqctl", "node_health_check"]
      interval: 30s
      timeout: 10s
      retries: 5

  nginx-proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    container_name: nginx-proxy-manager
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "81:81" # Admin UI
    volumes:
      - npm_data:/data
      - npm_letsencrypt:/etc/letsencrypt
    networks:
      - infra
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:81"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MongoDB Service
  mongodb:
    image: mongo:6
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: mensajeria
      MONGO_INITDB_ROOT_PASSWORD: mensajeria_pass
    ports:
      - "27017:27017" # Puerto estándar de MongoDB
    volumes:
      - mongodb_data:/data/db
    networks:
      - infra
    healthcheck:
      test: ["CMD-SHELL", "mongo --username $MONGO_INITDB_ROOT_USERNAME --password $MONGO_INITDB_ROOT_PASSWORD --eval 'db.adminCommand(\"ping\")' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus Monitoring Service
  prometheus:
    image: prom/prometheus:v3.0.0
    container_name: prometheus
    restart: always
    volumes:
      - prometheus_data:/etc/prometheus
    ports:
      - "9090:9090" # Prometheus Web UI
    networks:
      - infra
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Grafana Service
  grafana:
    image: grafana/grafana:11.4.0
    container_name: grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000" # Grafana Web UI
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - infra
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/login"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  # RabbitMQ Volumes
  rabbitmq_data:
    # driver_opts:
    #   type: none
    #   device: ./rabbitmq/data
    #   o: bind
  rabbitmq_config:
    # driver_opts:
    #   type: none
    #   device: ./rabbitmq/config
    #   o: bind
  rabbitmq_init:
    # driver_opts:
    #   type: none
    #   device: ./rabbitmq/init-scripts
    #   o: bind

  # Nginx Proxy Manager Volumes
  npm_data:
    # driver_opts:
    #   type: none
    #   device: ./nginx-proxy-manager/data
    #   o: bind
  npm_letsencrypt:
    # driver_opts:
    #   type: none
    #   device: ./nginx-proxy-manager/letsencrypt
    #   o: bind

  # MongoDB Volumes
  mongodb_data:
    # driver_opts:
    #   type: none
    #   device: ./mongodb/data
    #   o: bind

  # Monitoring Volumes
  prometheus_data:
    # driver_opts:
    #   type: none
    #   device: ./monitoring/prometheus_data
    #   o: bind
  grafana_data:
    # driver_opts:
    #   type: none
    #   device: ./monitoring/grafana_data
    #   o: bind

networks:
  infra:
    driver: bridge
